import Head from "next/head";
import MeetupList from "@/components/meetups/MeetupList";

// a local mock data
const DUMMY_MEETUPS = [
  {
    id: "m1",
    title: "A First meetup",
    image: "/images/city.jpeg",
    address: "Some address 5, 12345 Some city",
    description: "This is the first meetup!",
  },
  {
    id: "m2",
    title: "A First meetup",
    image: "/images/city.jpeg",
    address: "Some address 5, 12345 Some city",
    description: "This is the second meetup!",
  },
];

/**
 * if you need to wait data from server, you can export a function with fixed name 'getStaticProps'. (It can be a async function and use await/async feature  in it)
 * a core concept of pre-render
 * get remote data in build-in phase.
 */
export const getStaticProps = async () => {
  // It materially is server side code. You can read file or database in it. It will never execute in client side(browser)
  return {
    props: {
      meetups: DUMMY_MEETUPS,
    },
    revalidate: 1800, // set a duration to refresh data(regenerate page) by server.(unit second)
  };
};

export default function Home(props) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <MeetupList meetups={props.meetups} />
      </main>
    </>
  );
}

/**
 * in a traditional react single page application, usually we get server side data by useEffect and ajax like this:
 * import {useEffect, useState} from 'react';
 *
 * const [data, setData] = useState({});
 * useEffect(() => {
 *  // get server side data by ajax
 *  fetch(url, {})
 *    .then(res => res.json())
 *    .then(data => setData(data))
 * }, []);
 *
 * Maybe, you has already notice in this test. we already own two state in local scope [data]:
 *  1. in initial phrase: we set [] as data
 *  2. fetch successfully. we set server side return data as local scope data;
 * this will bring a problem, "SEO", search engineer will can't catch the content of page, because on the stage of web open and loading the page is empty. It's a pretty empty page. All data inject by ajax async after that.
 *
 * Fortunately the NextJS will resolve this problem by several solutions and features.
 */

/**
 * getServerSideProps or getStaticProps, Who is better?
 * 1. getServerSideProps doesn't pre-generate a page in build stage. On the contrary, it will render in every request. This is a advantage, but maybe a disadvantage.
 *  To some occasion. If you need validate token or in frequently refresh data. maybe you need fetch data from remote side in time.
 *  On the other hand, getStaticProps can pre-generate page in build-in phase. it can reduce server pressure. And you can use CDN with you builded Page file also.
 */
